<?php

  /*
    mailsync.phs 0.5

    mailsync connects via SFTP to a remove mail
    server and moves the received mails from the
    remote maildir to a local maildir. These are
    the steps:
      * connect to the remote server with a general user
      * go to Maildir of user $x
      * list mails of user $x in remote ./new
      * copy mails of user $x from remote ./new to local ./tmp
      * copy mails of user $x from local ./tmp to local ./new
      * delete mails of user $x from remote ./new
  */

  // some composer magic
  require(__DIR__."/../vendor/autoload.php");

  // we use the SFTP class
  use phpseclib\Net\SFTP;

  require_once(__DIR__."/../unchroot/unchroot.phs");

  require_once(__DIR__."/mailsync.conf.phs");
  require_once(__DIR__."/mailsync.func.phs");

  // load optional config splitting
  $arg_config = get_server_config($argv);
  if (false !== $arg_config) {
    require_once($arg_config);
  }

  function mailsync($params) {
    // check if all necessary dirs exist
    if (is_dir(replace_placeholders(LOCAL_MAILDIR, $params)) &&
        is_dir(dirname(replace_placeholders(PUSHINFO_PATH, $params))) &&
        is_dir(dirname(replace_placeholders(STATUS_PATH, $params)))) {
      // get file privileges of maildir
      $gid = filegroup(replace_placeholders(LOCAL_MAILDIR, $params));
      $uid = fileowner(replace_placeholders(LOCAL_MAILDIR, $params));

      // check if ./new, ./.Junk/new and ./tmp in Maildir exist
      if (is_dir(replace_placeholders(LOCAL_MAILDIR_NEW, $params)) &&
          is_dir(replace_placeholders(LOCAL_MAILDIR_TMP, $params)) &&
          is_dir(replace_placeholders(LOCAL_MAILDIR_SPAM_NEW, $params))) {
        // drop process privileges to file privileges
        if (force_unroot($uid, $gid)) {
          // disallow concurrency (either by timeout or by lock file)
          if ((is_int(TIMEOUT) &&
               disallow_concurrency(TIMEOUT)) ||
              (is_string(TIMEOUT) &&
               disallow_concurrency(replace_placeholders(TIMEOUT, $params)))) {
            // check if ./new, ./.Junk/new and ./tmp are write-accessible
            if (posix_access(replace_placeholders(LOCAL_MAILDIR_NEW, $params), POSIX_R_OK | POSIX_W_OK) &&
                posix_access(replace_placeholders(LOCAL_MAILDIR_TMP, $params), POSIX_R_OK | POSIX_W_OK) &&
                posix_access(replace_placeholders(LOCAL_MAILDIR_SPAM_NEW, $params), POSIX_R_OK | POSIX_W_OK)) {          
              // connect via SFTP
              $sftp = new SFTP(REMOTE_HOSTNAME, REMOTE_PORT);

              // clear the statcache to prevent side effects
              $sftp->clearStatCache();

              $remote_pubkey = null;
              if (file_exists(replace_placeholders(REMOTE_PUBKEY_FILE, $params))) {
                $remote_pubkey = file_get_contents(replace_placeholders(REMOTE_PUBKEY_FILE, $params));
              }

              // check if the remote public key is correct
              if ((null === REMOTE_PUBKEY_FILE) ||
                  (0 === strcmp(trim($sftp->getServerPublicHostKey()), trim($remote_pubkey)))) {
                // login via SFTP
                if ($sftp->login(REMOTE_USERNAME, REMOTE_PASSWORD)) {
                  // load file list
                  $files = $sftp->nlist(replace_placeholders(REMOTE_MAILDIR_NEW, $params));

                  // load last status to know which changes took place
                  $new_status = array();
                  $old_status = array();
                  if (file_exists(replace_placeholders(STATUS_PATH, $params))) {
                    $old_status = file(replace_placeholders(STATUS_PATH, $params),
                                       FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);

                    // split $old_status into filename and cause
                    for ($index = 0; $index < count($old_status); $index++) {
                      $old_status[$index] = explode("\t", $old_status[$index]);
                    }
                  }

                  // handle found files
                  $new_count = 0;
                  $old_count = 0;

                  // load list of mails to retry despite failure
                  $retry_status = array();
                  if (file_exists(replace_placeholders(RETRY_STATUS_PATH, $params))) {
                    $retry_status = file(replace_placeholders(RETRY_STATUS_PATH, $params),
                                         FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
                  }

                  foreach ($files as $files_item) {
                    // prepare the local and remote paths
                    $local_new  = replace_placeholders(LOCAL_MAILDIR_NEW, $params).basename($files_item);
                    $local_tmp  = replace_placeholders(LOCAL_MAILDIR_TMP, $params).basename($files_item);
                    $local_spam = replace_placeholders(LOCAL_MAILDIR_SPAM_NEW, $params).basename($files_item);

                    $remote_cur = replace_placeholders(REMOTE_MAILDIR_CUR, $params).basename($files_item);
                    $remote_new = replace_placeholders(REMOTE_MAILDIR_NEW, $params).basename($files_item);

                    // store the status
                    $old_status_value = null;
                    $proceed          = false;
                    $success          = false;

                    // only proceed with existing files
                    if ($sftp->is_file($remote_new)) {                  
                      // check if we shall proceed or skip otherwise
                      // it is important that this is executed or else we
                      // later don't know that this is an old entry
                      foreach ($old_status as $old_status_item) {
                        if (false !== $old_status_item) {
                          if (0 === strcasecmp($remote_new, $old_status_item[0])) {
                            // mission accomplished - file found in list
                            $old_status_value = $old_status_item;
                            break;
                          }
                        }
                      }

                      // define whether we proceed or not
                      // we either set RETRY_ON_FAILURE or
                      // $old_index is still -1
                      $proceed = (RETRY_ON_FAILURE || (null === $old_status_value));

                      // we may proceed anyway if the current file
                      // is listed in the RETRY_STATUS_PATH file
                      if (!$proceed) {
                        // maybe we shall retry anyway
                        foreach ($retry_status as $retry_status_item) {
                          $proceed = (0 === strcasecmp($remote_new, $retry_status_item));

                          if ($proceed) {
                            // mission accomplished - file found in list
                            break;
                          }
                        }
                      }

                      // now we know that we shall proceed
                      if ($proceed) {
                        // retrieve file size for later checks
                        $filesize_remote = $sftp->filesize($remote_new);
                        if (false !== $filesize_remote) {
                          // check that file size is smaller or equal
                          // to MAX_MAIL_SIZE, ignore if MAX_MAIL_SIZE <= 0
                          if ((MAX_MAIL_SIZE >= $filesize_remote) || (MAX_MAIL_SIZE <= 0)) {
                            // download the file to the TMP folder
                            if ($sftp->get($remote_new, $local_tmp)) {
                              // check file size
                              $filesize_local = filesize($local_tmp);
                              if ((false !== $filesize_local) &&
                                  ($filesize_local === $filesize_remote)) {
                                // read the contents of the file
                                $content = file_get_contents($local_tmp);
                                if (false !== $content) {
                                  // move to inbox or to spam?
                                  $local_target = $local_new;
                                  if (is_spam($content)) {
                                    $local_target = $local_spam;
                                  }

                                  // move file to target position
                                  if (rename($local_tmp, $local_target)) {
                                    // check file size a last time before deleting source
                                    $filesize_local = filesize($local_target);
                                    if ((false !== $filesize_local) &&
                                        ($filesize_local === $filesize_remote)) {
                                      // retrieved mails shall be deleted or moved
                                      if (DELETE_ON_SUCCESS) {
                                        // delete source
                                        if ($sftp->delete($remote_new)) {
                                          // we're done with this file
                                          $success = true;
                                        } else {
                                          array_push($new_status, array($remote_new, "remote unlink failed"));
                                        }
                                      } else {
                                        // touch source
                                        if ($sftp->touch($remote_new)) {
                                          // move source
                                          if ($sftp->rename($remote_new, $remote_cur)) {
                                            // we're done with this file
                                            $success = true;
                                          } else {
                                            array_push($new_status, array($remote_new, "remote rename failed"));
                                          }
                                        } else {
                                          array_push($new_status, array($remote_new, "remote touch failed"));
                                        }
                                      }
                                    } else {
                                      array_push($new_status, array($remote_new, "local NEW size mismatch"));
                                    }
                                  } else {
                                    array_push($new_status, array($remote_new, "local TMP rename failed"));
                                  }
                                } else {
                                  array_push($new_status, array($remote_new, "local TMP read failed"));
                                }
                              } else {
                                array_push($new_status, array($remote_new, "local TMP size mismatch"));
                              }
                            } else {
                              array_push($new_status, array($remote_new, "remote NEW to local TMP fetch failed"));
                            }
                          } else {
                            array_push($new_status, array($remote_new, "remote NEW exceedes size limit"));
                          }
                        } else {
                          array_push($new_status, array($remote_new, "remote NEW size read failed"));
                        }
                      } else {
                        // if we skip a file we still have to add it to the
                        // $new_status - we already found it so we don't have
                        // to search for it again
                        array_push($new_status, $old_status_value);
                      }

                      // we encountered an error
                      if (!$success) {
                        // we already know if this was a retry
                        if (null === $old_status_value) {
                          $new_count++;
                        } else {
                          $old_count++;
                        }
                      }

                      // print result message
                      if ($proceed) {
                        if ($success) {
                          print("DONE: ".$remote_new."\n");
                        } else {
                          print("FAIL: ".$remote_new."\n");
                        }
                      } else {
                        print("IGNORE: ".$remote_new."\n");
                      }
                    }
                  }

                  // delete successfully retrieved files
                  $del_count = 0;
                  $del_fail  = 0;
                  $del_keep  = 0;
                  if ((!DELETE_ON_SUCCESS) &&
                      (is_int(DELETE_AFTER_DAYS)) &&
                      (0 < DELETE_AFTER_DAYS)) {
                    // get list of files to delete
                    $del_files = $sftp->nlist(replace_placeholders(REMOTE_MAILDIR_CUR, $params));

                    foreach ($del_files as $del_files_item) {
                      // prepare the remote path
                      $del_remote = replace_placeholders(REMOTE_MAILDIR_CUR, $params).basename($del_files_item);

                      // only proceed with existing files
                      if ($sftp->is_file($del_remote)) {
                        // only proceed when file has waited DELETE_AFTER_DAYS number of days
                        $del_filemtime = $sftp->filemtime($del_remote);
                        if ((false !== $del_filemtime) &&
                            ((time() - (DELETE_AFTER_DAYS*24*60*60)) >= $del_filemtime)) {
                          // delete file
                          if ($sftp->delete($del_remote)) {
                            $del_count++;

                            print("DEL: ".$del_remote."\n");
                          } else {
                            $del_fail++;

                            print("DELFAIL: ".$del_remote."\n");
                          }
                        } else {
                          $del_keep++;

                          print("DELKEEP: ".$del_remote."\n");
                        }
                      }
                    }
                  }

                  // retrieve number of gone failures
                  $gone_count = count($old_status) - $old_count;
                  if ((0 < $new_count) ||
                      (0 < $gone_count) ||
                      (0 < $del_count) ||
                      (0 < $del_fail)) {
                    // write notification to file
                    file_put_contents(replace_placeholders(PUSHINFO_PATH, $params),
                                      count($new_status).PUSHINFO_MESSAGE.
                                      $new_count.PUSHINFO_MESSAGE_NEW.
                                      $old_count.PUSHINFO_MESSAGE_OLD.
                                      $gone_count.PUSHINFO_MESSAGE_GONE .
                                      $del_count.PUSHINFO_MESSAGE_DEL .
                                      $del_fail.PUSHINFO_MESSAGE_DELFAIL . 
                                      $del_keep.PUSHINFO_MESSAGE_DELKEEP);
                  }

                  // we're done, now we save the new status
                  // let's put it into strings first
                  for ($index = 0; $index < count($new_status); $index++) {
                    $new_status[$index] = implode("\t", $new_status[$index]);
                  }

                  // save new status for next execution
                  file_put_contents(replace_placeholders(STATUS_PATH, $params),
                                    implode(PHP_EOL, $new_status));
                } else {
                  print("ERROR: SFTP login failed\n");
                }
              } else {
                print("ERROR: remote public key mismatch\n");
              }

              $sftp = null;
            } else {
              print("ERROR: not all local maildir paths accessible after unrooting\n");
            }

            // free lock
            if (is_int(TIMEOUT)) {
              allow_concurrency(TIMEOUT);
            } else {
              allow_concurrency(replace_placeholders(TIMEOUT, $params));
            }
          } else {
            print("ERROR: setting timeout failed\n");
          }
        } else {
          print("ERROR: unrooting failed\n");
        }
      } else {
        print("ERROR: not all local maildir paths accessible\n");
      }
    } else {
      print("ERROR: not all local paths accessible\n");
    }
  }

  if (defined("LOCAL_MAILDIR") &&
      defined("LOCAL_MAILDIR_NEW") &&
      defined("LOCAL_MAILDIR_TMP") &&
      defined("LOCAL_MAILDIR_SPAM_NEW") &&
      defined("REMOTE_MAILDIR_CUR") &&
      defined("REMOTE_MAILDIR_NEW") &&
      defined("REMOTE_HOSTNAME") &&
      defined("REMOTE_PORT") &&
      defined("REMOTE_PUBKEY_FILE") &&
      defined("REMOTE_USERNAME") &&
      defined("REMOTE_PASSWORD") &&
      defined("DELETE_ON_SUCCESS") &&
      defined("DELETE_AFTER_DAYS") &&
      defined("SPAM_HEADER_START") &&
      defined("VIRUS_HEADER_START") &&
      defined("TIMEOUT") &&
      defined("STATUS_PATH") &&
      defined("RETRY_STATUS_PATH") &&
      defined("RETRY_ON_FAILURE") &&
      defined("PUSHINFO_PATH") &&
      defined("PUSHINFO_MESSAGE") &&
      defined("PUSHINFO_MESSAGE_NEW") &&
      defined("PUSHINFO_MESSAGE_OLD") &&
      defined("PUSHINFO_MESSAGE_GONE") &&
      defined("PUSHINFO_MESSAGE_DEL") &&
      defined("PUSHINFO_MESSAGE_DELFAIL") &&
      defined("PUSHINFO_MESSAGE_DELKEEP")) {
    // retrieve server parameter
    $params = array();
    if (false !== get_server($argv)) {
      $params["server"] = get_server($argv);
    }
    if (false !== get_user($argv)) {
      $params["user"] = get_user($argv);
    }

    // execute
    mailsync($params);
  } else {
    print("ERROR: missing configuration - split \$config?\n");
  }

?>
